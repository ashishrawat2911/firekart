// Mocks generated by Mockito 5.4.2 from annotations
// in domain/test/usecases/get_account_details_usecase/execute.welltested_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:domain/models/account_details_model.dart' as _i6;
import 'package:domain/models/network.dart' as _i7;
import 'package:domain/network_result/network_error.dart' as _i5;
import 'package:domain/repository/user_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i3.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.NetworkError, _i6.AccountDetails>>
      getUserDetails() => (super.noSuchMethod(
            Invocation.method(
              #getUserDetails,
              [],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.NetworkError, _i6.AccountDetails>>.value(
                _FakeEither_0<_i5.NetworkError, _i6.AccountDetails>(
              this,
              Invocation.method(
                #getUserDetails,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.NetworkError, _i6.AccountDetails>>);
  @override
  _i4.Future<_i2.Either<_i5.NetworkError, List<_i6.Address>>>
      fetchUserAddress() => (super.noSuchMethod(
            Invocation.method(
              #fetchUserAddress,
              [],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.NetworkError, List<_i6.Address>>>.value(
                _FakeEither_0<_i5.NetworkError, List<_i6.Address>>(
              this,
              Invocation.method(
                #fetchUserAddress,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.NetworkError, List<_i6.Address>>>);
  @override
  _i4.Future<_i2.Either<_i5.NetworkError, _i7.EmptyEntity>> addAddress(
          _i6.AddAddress? address) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAddress,
          [address],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.NetworkError, _i7.EmptyEntity>>.value(
                _FakeEither_0<_i5.NetworkError, _i7.EmptyEntity>(
          this,
          Invocation.method(
            #addAddress,
            [address],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.NetworkError, _i7.EmptyEntity>>);
  @override
  _i4.Future<_i2.Either<_i5.NetworkError, _i7.EmptyEntity>> editAddress(
          _i6.EditAddress? address) =>
      (super.noSuchMethod(
        Invocation.method(
          #editAddress,
          [address],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.NetworkError, _i7.EmptyEntity>>.value(
                _FakeEither_0<_i5.NetworkError, _i7.EmptyEntity>(
          this,
          Invocation.method(
            #editAddress,
            [address],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.NetworkError, _i7.EmptyEntity>>);
}
