// Mocks generated by Mockito 5.4.2 from annotations
// in domain/test/usecases/get_all_orders_usecase/execute.welltested_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:domain/models/add_order_model.dart' as _i7;
import 'package:domain/models/network.dart' as _i6;
import 'package:domain/models/order_model.dart' as _i8;
import 'package:domain/network_result/network_error.dart' as _i5;
import 'package:domain/repository/order_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OrderRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderRepository extends _i1.Mock implements _i3.OrderRepository {
  MockOrderRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.NetworkError, _i6.EmptyEntity>> placeOrder(
          _i7.AddOrder? order) =>
      (super.noSuchMethod(
        Invocation.method(
          #placeOrder,
          [order],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.NetworkError, _i6.EmptyEntity>>.value(
                _FakeEither_0<_i5.NetworkError, _i6.EmptyEntity>(
          this,
          Invocation.method(
            #placeOrder,
            [order],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.NetworkError, _i6.EmptyEntity>>);
  @override
  _i4.Future<_i2.Either<_i5.NetworkError, List<_i8.Order>>> getAllOrders() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllOrders,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.NetworkError, List<_i8.Order>>>.value(
                _FakeEither_0<_i5.NetworkError, List<_i8.Order>>(
          this,
          Invocation.method(
            #getAllOrders,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.NetworkError, List<_i8.Order>>>);
}
