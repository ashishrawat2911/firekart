// Mocks generated by Mockito 5.4.2 from annotations
// in presentation/test/features/order/view_model/my_orders_cubit/fetchOrders.welltested_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:domain/models/order_model.dart' as _i6;
import 'package:domain/network_result/network_error.dart' as _i5;
import 'package:domain/usecases/get_all_orders_usecase.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetAllOrdersUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllOrdersUseCase extends _i1.Mock
    implements _i3.GetAllOrdersUseCase {
  MockGetAllOrdersUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.NetworkError, List<_i6.Order>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.NetworkError, List<_i6.Order>>>.value(
                _FakeEither_0<_i5.NetworkError, List<_i6.Order>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.NetworkError, List<_i6.Order>>>);
}

/// A class which mocks [NetworkError].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkError extends _i1.Mock implements _i5.NetworkError {
  MockNetworkError() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: '',
      ) as String);
  @override
  set errorMessage(String? _errorMessage) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          _errorMessage,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: 0,
      ) as int);
  @override
  set status(int? _status) => super.noSuchMethod(
        Invocation.setter(
          #status,
          _status,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Order].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrder extends _i1.Mock implements _i6.Order {
  MockOrder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
      ) as int);
  @override
  set id(int? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );
  @override
  num get price => (super.noSuchMethod(
        Invocation.getter(#price),
        returnValue: 0,
      ) as num);
  @override
  set price(num? _price) => super.noSuchMethod(
        Invocation.setter(
          #price,
          _price,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get orderedAt => (super.noSuchMethod(
        Invocation.getter(#orderedAt),
        returnValue: '',
      ) as String);
  @override
  set orderedAt(String? _orderedAt) => super.noSuchMethod(
        Invocation.setter(
          #orderedAt,
          _orderedAt,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get orderStatus => (super.noSuchMethod(
        Invocation.getter(#orderStatus),
        returnValue: '',
      ) as String);
  @override
  set orderStatus(String? _orderStatus) => super.noSuchMethod(
        Invocation.setter(
          #orderStatus,
          _orderStatus,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get paymentId => (super.noSuchMethod(
        Invocation.getter(#paymentId),
        returnValue: '',
      ) as String);
  @override
  set paymentId(String? _paymentId) => super.noSuchMethod(
        Invocation.setter(
          #paymentId,
          _paymentId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get signature => (super.noSuchMethod(
        Invocation.getter(#signature),
        returnValue: '',
      ) as String);
  @override
  set signature(String? _signature) => super.noSuchMethod(
        Invocation.setter(
          #signature,
          _signature,
        ),
        returnValueForMissingStub: null,
      );
}
